---Minimalist Style Rules---

Color Palette
Primary Color: Dark Gray (#333333) for headings and key elements.

Secondary Color: Light Gray (#f2f2f2) for backgrounds and subtle accents.

Accent Color: White (#ffffff) for buttons and highlights.

Text Color: Black (#000000) for body text.

css
Copy
:root {
  --primary-color: #333333; /* Dark Gray */
  --secondary-color: #f2f2f2; /* Light Gray */
  --accent-color: #ffffff; /* White */
  --text-color: #000000; /* Black */
}
Geometric Aesthetic
Buttons:

Use sharp edges with no border radius.

Add a subtle border for definition.

css
Copy
.button {
  background-color: var(--accent-color);
  border: 2px solid var(--primary-color);
  border-radius: 0; /* Sharp edges */
  padding: 10px 20px;
  color: var(--text-color);
  text-decoration: none;
  display: inline-block;
  font-family: 'Helvetica', sans-serif;
  transition: all 0.3s ease;
}

.button:hover {
  background-color: var(--primary-color);
  color: var(--accent-color);
}
Icons and Graphics:

Use simple geometric shapes for icons and decorative elements.

Avoid overly detailed or complex designs.

Typography
Font:

Use clean, sans-serif fonts like Helvetica or Arial.

Ensure high contrast between text and background.

css
Copy
body {
  font-family: 'Helvetica', sans-serif;
  color: var(--text-color);
  background-color: var(--secondary-color);
  line-height: 1.6;
}

h1, h2, h3 {
  color: var(--primary-color);
}
Imagery
Images:

Use high-quality, simple, and thematic images.

Avoid overly detailed or cluttered visuals.

Use images sparingly to create focal points.

Illustrations:

Prefer vector graphics or illustrations that align with the geometric theme.

Layout
Grid-Based Layout:

Use a simple, grid-based structure for balance and organization.

Maximize white space to avoid clutter.

css
Copy
.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
}

.grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 20px;
}
Interactivity
Hover Effects:

Keep hover effects subtle and smooth.

Use transitions for a polished feel.

css
Copy
.button:hover {
  background-color: var(--primary-color);
  color: var(--accent-color);
  transition: all 0.3s ease;
}
Updated File Structure
Copy
web3-portfolio/
│
├── public/                     # Static assets served directly
│   ├── index.html              # Main HTML file
│   └── assets/                 # Static assets (e.g., favicon, images)
│       ├── favicon.ico         # Favicon for the site
│       └── images/             # Minimalist images and illustrations
│
├── src/                        # Source code for the application
│   ├── index.js                # Entry point for the application
│   ├── main.css                # Global styles (includes minimalist rules)
│   ├── components/             # Reusable UI components
│   │   ├── Header.js           # Header component
│   │   ├── LandingSection.js   # Landing section with animations
│   │   ├── PortfolioShowcase.js # Portfolio project cards
│   │   ├── Web3Integration.js  # Web3 wallet and blockchain integration
│   │   ├── Blog.js             # Technical blog section
│   │   ├── Contact.js          # Contact form and social links
│   │   └── Footer.js           # Footer component
│   ├── services/               # Business logic and external integrations
│   │   ├── web3Service.js      # Web3 wallet and blockchain interactions
│   │   ├── analyticsService.js # Privacy-focused analytics
│   │   ├── ipfsService.js      # IPFS upload and retrieval
│   │   ├── arweaveService.js   # Arweave upload and retrieval
│   │   ├── ethLimoService.js   # Eth.limo integration
│   │   ├── crossChainService.js # Cross-chain interactions
│   │   └── wasmService.js      # WebAssembly utilities
│   ├── utils/                  # Utility functions and helpers
│   │   └── lazyLoad.js         # Lazy loading for heavy assets
│   └── assets/                 # Project-specific assets
│       └── icons/              # Geometric icons and graphics
│
├── contracts/                  # Smart contracts for multiple blockchains
│   ├── evm/                    # EVM-compatible contracts (Solidity)
│   │   └── MyContract.sol      # Example Solidity contract
│   ├── solana/                 # Solana programs (Rust)
│   │   └── my_program.rs       # Example Solana program
│   ├── sui/                    # Sui Move contracts
│   │   └── my_contract.move    # Example Sui Move contract
│   └── algorand/               # Algorand contracts (Python)
│       └── my_contract.py      # Example Algorand contract
│
├── Dockerfile                  # Docker configuration for containerization
├── docker-compose.yml          # Docker Compose for multi-container setup
├── fly.toml                    # Fly.io deployment configuration
├── akash.yml                   # Akash deployment configuration
├── package.json                # Project dependencies and scripts
├── README.md                   # Project documentation
└── .env                        # Environment variables (e.g., API keys)
Implementation Details
Apply Minimalist Styles:

Add the minimalist CSS rules to src/main.css.

Use the defined color palette and typography throughout the project.

Geometric Buttons:

Style buttons using the .button class in main.css.

Grid Layout:

Use the .grid class for portfolio project cards and other sections.

Imagery:

Add minimalist images and illustrations to public/assets/images/.

Use vector graphics for icons in src/assets/icons/.

Interactivity:

Apply subtle hover effects to buttons and interactive elements.

Example Minimalist Landing Section
javascript
Copy
export function createLandingSection() {
    const section = document.createElement('section');
    section.id = 'landing';
    section.innerHTML = `
        <div class="hero">
            <h1>Web3 Developer Portfolio</h1>
            <p>Highlighting full-stack and blockchain expertise.</p>
            <a href="#portfolio" class="button">Explore Projects</a>
        </div>
    `;
    // Lazy load Vanta.js background animation
    lazyLoadVanta(section);
    return section;
}
Final Notes
Consistency:

Ensure all components adhere to the minimalist style rules.

Use the defined color palette and typography consistently.

Testing:

Test the design on multiple devices and screen sizes.

Use Lighthouse to ensure accessibility and performance.

Refinement:

Continuously refine the design to maintain a clean and sophisticated look.

By following these rules and guidelines, your Web3 Developer Portfolio will have a stunning, minimalist design that aligns with modern web design principles.

##VantaBackground

Vanta.js for Animated Backgrounds
Rules for Vanta.js
Key Visual Component:

Use Vanta.js to create a stunning animated background for the landing section.

Lazy load Vanta.js to minimize initial page load time.

Implementation:

Add Vanta.js to index.html:

html
Copy
<script src="https://cdn.jsdelivr.net/npm/vanta@latest/dist/vanta.waves.min.js"></script>
Run HTML
Initialize Vanta.js in LandingSection.js:

javascript
Copy
import { lazyLoadVanta } from '../utils/lazyLoad.js';

export function createLandingSection() {
    const section = document.createElement('section');
    section.id = 'landing';
    section.innerHTML = `
        <div class="hero">
            <h1>Web3 Developer Portfolio</h1>
            <p>Highlighting full-stack and blockchain expertise.</p>
            <button>Explore Projects</button>
        </div>
    `;
    // Lazy load Vanta.js background animation
    lazyLoadVanta(section);
    return section;
}
Lazy load Vanta.js in utils/lazyLoad.js:

javascript
Copy
export function lazyLoadVanta(section) {
    const script = document.createElement('script');
    script.src = 'https://cdn.jsdelivr.net/npm/vanta@latest/dist/vanta.waves.min.js';
    script.onload = () => {
        VANTA.WAVES({
            el: section,
            color: 0x00ffff,
            waveHeight: 20,
            shininess: 50,
            waveSpeed: 1.5,
            zoom: 0.75
        });
    };
    document.body.appendChild(script);
}
Compatibility with HTMX:

Vanta.js works seamlessly with HTMX since it only requires a DOM element to attach the animation.

No additional integration is needed.

World-Class UI Design with shadcn
Evaluation of shadcn
Compatibility with HTMX:

shadcn is a React-based library and requires JavaScript.

Using shadcn with HTMX would require significant workarounds and is not recommended.

Recommendation:

Use React for the UI if shadcn is a must-have.

Alternatively, use Tailwind CSS with custom components for a similar design system.

Implementation with React:

Install shadcn:

bash
Copy
npx shadcn-ui@latest init
Use shadcn components in React:

javascript
Copy
import { Button } from "@/components/ui/button";

function App() {
    return (
        <div>
            <Button>Click Me</Button>
        </div>
    );
}
Implementation with Tailwind CSS:

Install Tailwind CSS:

bash
Copy
npm install tailwindcss
Create custom components inspired by shadcn:

html
Copy
<button class="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600">
    Click Me
</button>
Run HTML
Updated File Structure
Copy
web3-portfolio/
│
├── public/                     # Static assets served directly
│   ├── index.html              # Main HTML file
│   └── assets/                 # Static assets (e.g., favicon, images)
│       └── favicon.ico         # Favicon for the site
│
├── src/                        # Source code for the application
│   ├── index.js                # Entry point for the application
│   ├── main.css                # Global styles
│   ├── components/             # Reusable UI components
│   │   ├── Header.js           # Header component
│   │   ├── LandingSection.js   # Landing section with animations
│   │   ├── PortfolioShowcase.js # Portfolio project cards
│   │   ├── Web3Integration.js  # Web3 wallet and blockchain integration
│   │   ├── Blog.js             # Technical blog section
│   │   ├── Contact.js          # Contact form and social links
│   │   └── Footer.js           # Footer component
│   ├── services/               # Business logic and external integrations
│   │   ├── web3Service.js      # Web3 wallet and blockchain interactions
│   │   ├── analyticsService.js # Privacy-focused analytics
│   │   ├── ipfsService.js      # IPFS upload and retrieval
│   │   ├── arweaveService.js   # Arweave upload and retrieval
│   │   ├── ethLimoService.js   # Eth.limo integration
│   │   ├── crossChainService.js # Cross-chain interactions
│   │   └── wasmService.js      # WebAssembly utilities
│   ├── utils/                  # Utility functions and helpers
│   │   └── lazyLoad.js         # Lazy loading for heavy assets
│   └── assets/                 # Project-specific assets
│       └── images/             # Images used in the project
│
├── contracts/                  # Smart contracts for multiple blockchains
│   ├── evm/                    # EVM-compatible contracts (Solidity)
│   │   └── MyContract.sol      # Example Solidity contract
│   ├── solana/                 # Solana programs (Rust)
│   │   └── my_program.rs       # Example Solana program
│   ├── sui/                    # Sui Move contracts
│   │   └── my_contract.move    # Example Sui Move contract
│   └── algorand/               # Algorand contracts (Python)
│       └── my_contract.py      # Example Algorand contract
│
├── Dockerfile                  # Docker configuration for containerization
├── docker-compose.yml          # Docker Compose for multi-container setup
├── fly.toml                    # Fly.io deployment configuration
├── akash.yml                   # Akash deployment configuration
├── package.json                # Project dependencies and scripts
├── README.md                   # Project documentation
└── .env                        # Environment variables (e.g., API keys)
Final Recommendations
Use Foundry for EVM development and Hardhat as a backup.

Leverage Vanta.js for animated backgrounds with lazy loading.

Use React and shadcn for a world-class UI design.

Tailwind CSS is a viable alternative if HTMX is preferred.

##Foundry

Foundry is a modern Ethereum development framework.

Use Foundry for EVM development and Hardhat as a backup.

Rules for Foundry
Primary Tool:

Use Foundry for all EVM smart contract development, testing, and deployment.

Foundry’s forge and cast tools should be the default for compiling, testing, and interacting with contracts.

Backup Tool:

Use Hardhat only if Foundry encounters issues or lacks specific features.

Maintain a Hardhat configuration file (hardhat.config.js) as a backup.

##HTMX
Opportunities for HTMX and WebAssembly
HTMX
HTMX is a lightweight library that allows you to add dynamic behavior to your application without writing JavaScript. It’s ideal for server-side rendering (SSR) and progressive enhancement. Here’s how it can be used:

Dynamic Content Loading:

Use HTMX to load sections of the page dynamically (e.g., portfolio projects, blog posts).

Example: Replace the PortfolioShowcase.js component with HTMX for server-rendered project cards.

Form Submissions:

Use HTMX for the contact form to submit data without a full page reload.

Example: Add hx-post and hx-target attributes to the form.

Progressive Enhancement:

Use HTMX to enhance the user experience while maintaining a minimal JavaScript footprint.

WebAssembly (Wasm)
WebAssembly is ideal for performance-critical tasks, especially in blockchain interactions. Here’s how it can be used:

Cryptographic Operations:

Use Wasm for wallet signing, hashing, and other cryptographic tasks.

Example: Implement a Rust-based Wasm module for signing transactions.

Blockchain Interactions:

Use Wasm for cross-chain smart contract interactions.

Example: Compile Solana or Sui Move smart contracts to Wasm for in-browser execution.

Performance Optimization:

Use Wasm for computationally intensive tasks like NFT rendering or blockchain data processing.

Cross-Chain Adaptability
To demonstrate your ability to engineer on multiple blockchains, the project should support EVM, Solana, Sui Move, Algorand, and cross-chain SDKs like Chainlink CCIP and Axelar. Here’s how to achieve this:

Smart Contract Deployment:

Include smart contracts for each blockchain in a contracts/ directory.

Use frameworks like Hardhat (EVM), Anchor (Solana), and Move (Sui).

Cross-Chain SDKs:

Integrate Chainlink CCIP and Axelar for cross-chain asset transfers.

Example: Use Axelar to transfer assets between Ethereum and Solana.

Unified Interface:

Create a services/crossChainService.js to abstract blockchain-specific logic.

Example: A single function transferAsset(sourceChain, targetChain, asset) that uses the appropriate SDK.

Testing:

Test smart contracts on testnets for each blockchain.

Use tools like Truffle (EVM), Solana CLI, and Sui DevNet.

Updated .cursorrules File
File Structure Rules
Copy
web3-portfolio/
│
├── public/                     # Static assets served directly
│   ├── index.html              # Main HTML file
│   └── assets/                 # Static assets (e.g., favicon, images)
│       └── favicon.ico         # Favicon for the site
│
├── src/                        # Source code for the application
│   ├── index.js                # Entry point for the application
│   ├── main.css                # Global styles
│   ├── components/             # Reusable UI components
│   │   ├── Header.js           # Header component
│   │   ├── LandingSection.js   # Landing section with animations
│   │   ├── PortfolioShowcase.js # Portfolio project cards
│   │   ├── Web3Integration.js  # Web3 wallet and blockchain integration
│   │   ├── Blog.js             # Technical blog section
│   │   ├── Contact.js          # Contact form and social links
│   │   └── Footer.js           # Footer component
│   ├── services/               # Business logic and external integrations
│   │   ├── web3Service.js      # Web3 wallet and blockchain interactions
│   │   ├── analyticsService.js # Privacy-focused analytics
│   │   ├── ipfsService.js      # IPFS upload and retrieval
│   │   ├── arweaveService.js   # Arweave upload and retrieval
│   │   ├── ethLimoService.js   # Eth.limo integration
│   │   ├── crossChainService.js # Cross-chain interactions
│   │   └── wasmService.js      # WebAssembly utilities
│   ├── utils/                  # Utility functions and helpers
│   │   └── lazyLoad.js         # Lazy loading for heavy assets
│   └── assets/                 # Project-specific assets
│       └── images/             # Images used in the project
│
├── contracts/                  # Smart contracts for multiple blockchains
│   ├── evm/                    # EVM-compatible contracts (Solidity)
│   │   └── MyContract.sol      # Example Solidity contract
│   ├── solana/                 # Solana programs (Rust)
│   │   └── my_program.rs       # Example Solana program
│   ├── sui/                    # Sui Move contracts
│   │   └── my_contract.move    # Example Sui Move contract
│   └── algorand/               # Algorand contracts (Python)
│       └── my_contract.py      # Example Algorand contract
│
├── Dockerfile                  # Docker configuration for containerization
├── docker-compose.yml          # Docker Compose for multi-container setup
├── fly.toml                    # Fly.io deployment configuration
├── akash.yml                   # Akash deployment configuration
├── package.json                # Project dependencies and scripts
├── README.md                   # Project documentation
└── .env                        # Environment variables (e.g., API keys)
Project-Specific Guidelines
HTMX Integration:

Use HTMX for dynamic content loading and form submissions.

Example: Add hx-get and hx-target attributes to load portfolio projects dynamically.

WebAssembly Integration:

Use Wasm for cryptographic operations and blockchain interactions.

Example: Implement a Rust-based Wasm module for signing transactions.

Cross-Chain Adaptability:

Deploy smart contracts on EVM, Solana, Sui, and Algorand.

Use Chainlink CCIP and Axelar for cross-chain asset transfers.

Test contracts on testnets for each blockchain.

Performance Optimization:

Use decentralized storage for static assets to reduce server load.

Optimize Docker images for fast deployment and scaling.

Use caching and compression for improved performance.

Security:

Use HTTPS for all API calls and decentralized storage interactions.

Implement Content Security Policy (CSP) headers.

Sanitize user inputs in the contact form.

Testing:

Test Docker builds locally before deployment.

Test decentralized storage integrations with sample files.

Use Lighthouse to measure performance, accessibility, and best practices.

Instructions for Developers
HTMX Setup:

Add HTMX to index.html:

html
Copy
<script src="https://unpkg.com/htmx.org"></script>
Run HTML
Use HTMX for dynamic content loading:

html
Copy
<div hx-get="/api/projects" hx-trigger="load" hx-target="#projects"></div>
Run HTML
WebAssembly Setup:

Install Rust and wasm-pack:

bash
Copy
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
cargo install wasm-pack
Create a Wasm module:

bash
Copy
wasm-pack new my-wasm-module
Build and use the Wasm module:

bash
Copy
wasm-pack build
Cross-Chain Setup:

Install blockchain-specific tools:

bash
Copy
# EVM
npm install hardhat

# Solana
sh -c "$(curl -sSfL https://release.solana.com/stable/install)"

# Sui
cargo install sui

# Algorand
pip install py-algorand-sdk
Deploy contracts:

bash
Copy
# EVM
npx hardhat run scripts/deploy.js --network goerli

# Solana
anchor deploy

# Sui
sui move build
sui client publish

# Algorand
python deploy.py
Deployment:

Fly.io:

bash
Copy
flyctl launch
Akash:

bash
Copy
akash deploy akash.yml